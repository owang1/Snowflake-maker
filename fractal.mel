// UI global variables
global string $sizeSlider;
global string $densitySlider;
global string $angleSlider;
global string $iterationsSlider;
global string $positionField;
global string $directionField;
global string $myCheckBox;  
global string $colorPicker;
global string $snowRadio;
global string $rs;
global string $rk;

// Initialize other variables
global float $size = 10.0;
global float $constant = 3.5;
global vector $pos = <<0, 0, 0>>;
global vector $direction = <<0, 0, 0>>;
global vector $color = <<0, 0, 0>>;
global int $angle = 45;
global int $iterations = 3;
global string $chkbxState = "not checked";
global string $snowflakeType = "simple";

// Main function
global proc SnowUI(){
    global string $sizeSlider;
    global string $densitySlider; 
    global string $angleSlider;
    global string $iterationsSlider;
    global string $positionField;
    global string $directionField;
    global string $myCheckBox; 
    global string $colorPicker; 
    global string $snowRadio;
    global string $rs;
    global string $rk;
;


viewSet -f;
if ( `window -exists MyWindow` ) {
    deleteUI MyWindow; // delete window when it exists
}

window -t "Snowflake Generator" -w 250 -h 300 MyWindow;

// Basic layout that places each control in single column 
columnLayout -adjustableColumn true;

    // Insert blank text row for spacing
    text " ";
    text -label "General";
    separator;
	// Position of Snowflake
	$positionField = `intFieldGrp -numberOfFields 3 -columnWidth 1 100
							  -label "Position"
							  -value1 0 -value2 0 -value3 0`;
	// Position of Snowflake
	$directionField = `intFieldGrp -numberOfFields 3 -columnWidth 1 100
							  -label "Direction"
							  -value1 0 -value2 0 -value3 0`;
							  
    // Size slider corresponds to height of 1st polycube    
    $sizeSlider = `floatSliderGrp -columnWidth 1 100
							  -label "Size"
							  -field true
							  -value 10.0
							  -min 8.0
							  -max 12.0`;    
							  
    // Higher density -> less complex snowflake
    $densitySlider = `floatSliderGrp -columnWidth 1 100
							  -label "Density Constant"
							  -field true
							  -value 3.5
							  -min 2.0
							  -max 5.0`;    
							  
    // Angle between each polycube branch
    $angleSlider = `intSliderGrp -columnWidth 1 100
							  -label "Angle"
							  -field true
							  -value 45
							  -min 30
							  -max 72`; 
							  
    // Number of Iterations of Koch snowflake
    $iterationsSlider = `intSliderGrp -columnWidth 1 100
							  -label "Iterations"
							  -field true
							  -value 3
							  -min 1
							  -max 7`; 
							  
    $colorPicker = `colorSliderGrp -label "Color" -rgb 1 1 1  -columnWidth 1 100`;

    // Radio buttons to determine type to snowflake\
    text -label "Snowflake Type";
    separator;    
    $snowRadio = `radioCollection`;
    $rs = `radioButton -label "Simple" -onCommand "$snowflakeType = \"simple\""`;
    $rk = `radioButton -label "Koch" -onCommand "$snowflakeType = \"koch\""`; 
    
    // Select simple snowflake by default
    radioCollection -edit -select $rs $snowRadio; 
           					  
    // Buttons for generating & deleting snowflakes   
    button -label " Generate Snowflake" -command "Generate" -bgc .8 .9 1;
    button -label " Delete All Snowflakes" -command "Delete" -bgc 1 .8 .8;
							 
showWindow MyWindow;

}
SnowUI();

// Generate() is called when "Generate Snowflake" button is pressed
global proc Generate(){
    global string $sizeSlider;
    global string $densitySlider; 
    global string $angleSlider;
    global string $iterationsSlider;
    global string $positionField;
    global string $directionField;
    global string $colorPicker;
    global string $snowRadio;
    global string $rs;
    global string $rk;
    string $allPolycubes[];

    float $size = `floatSliderGrp -q -value $sizeSlider`;
    float $constant = `floatSliderGrp -q -value $densitySlider`;
    int $angle = `intSliderGrp -q -value $angleSlider`;
    int $iterations = `intSliderGrp -q -value $iterationsSlider`;
    vector $pos = `intFieldGrp -q -value $positionField`;
    vector $color = `colorSliderGrp -q -rgbValue $colorPicker`;
    vector $direction = `intFieldGrp -q -value $directionField`;
    string $selected =  `radioCollection -q -select $snowRadio`;
    string $snowflakeType = `radioButton -q -label $selected`;
    print $snowflakeType;
    
    int $koch_angle = -30;
    int $curr_angle = 0;
    
    if($snowflakeType == "Koch"){
        snowflake_koch($size, $iterations, $koch_angle, $curr_angle, $pos, $color);
    }else if($snowflakeType == "Simple"){
        snowflake($size, $constant, $angle, $pos, $direction, $color);
    }    
    // Rotate the snowflake
    $allPolycubes = `ls -type polyCube`;
    select -all;
    group -n mySnowflake;
    rotate -pivot ($pos.x) ($pos.y) ($pos.z) -xyz ($direction.x) ($direction.y) ($direction.z) mySnowflake;

}

global proc Delete(){
    file -f -new;
    viewSet -f;
}


// Simple recursive snowflake generation
global proc snowflake (float $size, float $constant, int $angle, vector $pos, vector $direction, vector $color) {
    viewSet -f;
    
    // Base case
    if($size < .5){
        return;
    }
    
    
    for($theta = 0; $theta < 360; $theta += $angle){
        polyCube -n myCube -d .1 -w .1 -h $size;                // create polycube of height $size
        setAttr "lambert1.color" -type double3 ($color.r) ($color.g) ($color.b) ;
        rotate -r -os -fo 0 0 $theta;                 // pos and rotate to correct position
        move -r ($pos.x) ($pos.y) ($pos.z);
        
        // Divide $size by $constant each time
        vector $next = <<($pos.x + ($size/$constant)*cos(deg_to_rad($theta))), ($pos.y + ($size/$constant)*sin(deg_to_rad($theta))), $pos.z>>;
        snowflake($size/$constant, $constant, $angle, $next, $direction, $color);
     } 
}


global proc snowflake_koch(float $size, int $iterations, int $koch_angle, int $curr_angle, vector $pos, vector $color){
    // Base case
    if($iterations == 0){
        return;
    }
    
    // Create triangular prism
    polyPrism -l 0.1 -w $size;
    
    // Set color
    setAttr "lambert1.color" -type double3 ($color.r) ($color.g) ($color.b) ;

    //rotate -pivot ($pos.x) ($pos.y) ($pos.z) -xyz 90 0 $koch_angle;
    rotate -pivot 0 0 0 -xyz 90 0 $koch_angle;

    // pos
    move -r ($pos.x) ($pos.y) ($pos.z);

    // Increment variables
    $iterations = $iterations - 1;

    vector $next_pos = <<0,0,0>>;
    
    // Top smaller triangle
    $next_pos = <<($pos.x + ($size/2.6)*sin(deg_to_rad($curr_angle))), ($pos.y +  ($size/2.6)*cos(deg_to_rad($curr_angle))), $pos.z>>;
    snowflake_koch($size/3.0, $iterations, $koch_angle, $curr_angle, $next_pos, $color);
    
    // Right smaller triangle 
    $curr_angle = $curr_angle + 60;
    $next_pos = <<($pos.x + ($size/2.6)*sin(deg_to_rad($curr_angle))), ($pos.y +  ($size/2.6)*cos(deg_to_rad($curr_angle))), $pos.z>>;
    snowflake_koch($size/3.0, $iterations, $koch_angle + 60, $curr_angle, $next_pos, $color);
    
    // Left smaller triangle
    $curr_angle = $curr_angle - 120;
    $next_pos = <<($pos.x + ($size/2.6)*sin(deg_to_rad($curr_angle))), ($pos.y +  ($size/2.6)*cos(deg_to_rad($curr_angle))), $pos.z>>;
    snowflake_koch($size/3.0, $iterations, $koch_angle -60, $curr_angle, $next_pos, $color);

    // Bottom left smaller triangle 
    $curr_angle = $curr_angle - 60;
    $next_pos = <<($pos.x + ($size/2.6)*sin(deg_to_rad($curr_angle))), ($pos.y +  ($size/2.6)*cos(deg_to_rad($curr_angle))), $pos.z>>;
    snowflake_koch($size/3.0, $iterations, $koch_angle - 120, $curr_angle, $next_pos, $color);
    
    // Bottom smaller triangle 
    $curr_angle = $curr_angle - 60;
    $next_pos = <<($pos.x + ($size/2.6)*sin(deg_to_rad($curr_angle))), ($pos.y +  ($size/2.6)*cos(deg_to_rad($curr_angle))), $pos.z>>;
    snowflake_koch($size/3.0, $iterations, $koch_angle - 60, $curr_angle, $next_pos, $color);
    
    // Bottom right smaller triangle 
    $curr_angle = $curr_angle - 60;
    $next_pos = <<($pos.x + ($size/2.6)*sin(deg_to_rad($curr_angle))), ($pos.y +  ($size/2.6)*cos(deg_to_rad($curr_angle))), $pos.z>>;
    snowflake_koch($size/3.0, $iterations, $koch_angle, $curr_angle, $next_pos, $color);
    
}
