// UI global variables
global string $sizeSlider;
global string $densitySlider;
global string $angleSlider;
global string $positionField;
global string $directionField;
global string $myCheckBox;  
global string $colorPicker;

// Initialize other variables
global float $size = 10.0;
global float $constant = 3.5;
global vector $pos = <<0, 0, 0>>;
global vector $direction = <<0, 0, 0>>;
global vector $color = <<0, 0, 0>>;
global int $angle = 45;
global string $chkbxState = "not checked";

// Main function
global proc SnowUI(){
    global string $sizeSlider;
    global string $densitySlider; 
    global string $angleSlider;
    global string $positionField;
    global string $directionField;
    global string $myCheckBox; 
    global string $colorPicker; 
;

    
viewSet -f;
if ( `window -exists MyWindow` ) {
    deleteUI MyWindow; // delete window when it exists
}

window -t "Snowflake Generator" -w 250 -h 300 MyWindow;
 
// Basic layout that places each control in single column 
columnLayout -adjustableColumn true;

    // Insert blank text row for spacing
    text " ";

	// Position of Snowflake
	$positionField = `intFieldGrp -numberOfFields 3 -columnWidth 1 100
							  -label "Position"
							  -value1 0 -value2 0 -value3 0`;
	// Position of Snowflake
	$directionField = `intFieldGrp -numberOfFields 3 -columnWidth 1 100
							  -label "Direction"
							  -value1 0 -value2 0 -value3 0`;
							  
    // Size slider corresponds to height of 1st polycube    
    $sizeSlider = `floatSliderGrp -columnWidth 1 100
							  -label "Size"
							  -field true
							  -value 10.0
							  -min 8.0
							  -max 12.0`;    
							  
    // Higher density -> less complex snowflake
    $densitySlider = `floatSliderGrp -columnWidth 1 100
							  -label "Density Constant"
							  -field true
							  -value 3.5
							  -min 2.0
							  -max 5.0`;    
							  
    // Angle between each polycube branc
    $angleSlider = `intSliderGrp -columnWidth 1 100
							  -label "Angle"
							  -field true
							  -value 45
							  -min 30
							  -max 72`; 
   $colorPicker = `colorSliderGrp -label "Color" -rgb 1 1 1  -columnWidth 1 100`;
					  							  
	$myCheckBox = `checkBox -label "Randomized edge lengths"
	      -onCommand "$chkbxState = \"checked\""
          -offCommand "$chkbxState = \"not checked\""`;  
      
	$bevelCheckBox = `checkBox -label "Bevel"
	      -onCommand "$chkbxState = \"checked\""
          -offCommand "$chkbxState = \"not checked\""`;  
                    					  
    // Buttons for generating & deleting snowflakes   
    button -label " Generate Snowflake" -command "Generate";
    button -label " Delete Snowflake" -command "Delete";
							 
showWindow MyWindow;

}
SnowUI();

// Generate() is called when "Generate Snowflake" button is pressed
global proc Generate(){
    global string $sizeSlider;
    global string $densitySlider; 
    global string $angleSlider;
    global string $positionField;
    global string $directionField;
    global string $myCheckBox;
    global string $colorPicker;
    string $allPolycubes[];

    float $size = `floatSliderGrp -q -value $sizeSlider`;
    float $constant = `floatSliderGrp -q -value $densitySlider`;
    int $angle = `intSliderGrp -q -value $angleSlider`;
    vector $pos = `intFieldGrp -q -value $positionField`;
    vector $color = `colorSliderGrp -q -rgbValue $colorPicker`;
    vector $direction = `intFieldGrp -q -value $directionField`;
    string $chkbxState = `checkBox -q -value $myCheckBox`;

    //group -em -name polycubes;
    
    // Create the snowflake
    snowflake($size, $constant, $angle, $pos, $direction, $color, $chkbxState);
    
    // Rotate the snowflake
    //rotate -xyz ($direction.x) ($direction.y) ($direction.z) polycubes;
    
    $allPolycubes = `ls -type polyCube`;
    select -all;
    group -n mySnowflake;
    rotate -pivot ($pos.x) ($pos.y) ($pos.z) -xyz ($direction.x) ($direction.y) ($direction.z) mySnowflake;

}

global proc Delete(){
    file -f -new;
    viewSet -f;
}


// Recursive Snowflake Generation
global proc snowflake (float $size, float $constant, int $angle, vector $pos, vector $direction, vector $color, string $chkbxState) {
    viewSet -f;
    
    //print $chkbxState;

    
    // Base case
    if($size < .5){
        return;
    }
    
    
    for($theta = 0; $theta < 360; $theta += $angle){
        polyCube -n myCube -d .1 -w .1 -h $size;                // create polycube of height $size
        setAttr "lambert1.color" -type double3 ($color.r) ($color.g) ($color.b) ;
        rotate -r -os -fo 0 0 $theta;                 // move and rotate to correct position
        move -r ($pos.x) ($pos.y) ($pos.z);

        //float $randomEdge = rand(.8, 1.2);
        //print($randomEdge);
        
        // Divide $size by $constant each time
        vector $next = <<($pos.x + ($size/$constant)*cos(deg_to_rad($theta))), ($pos.y + ($size/$constant)*sin(deg_to_rad($theta))), $pos.z>>;
        snowflake($size/$constant, $constant, $angle, $next, $direction, $color, $chkbxState);
     } 
}
